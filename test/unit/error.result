test_run = require('test_run').new()
---
...
vshard = require('vshard')
---
...
util = require('util')
---
...
json = require('json')
---
...
lerror = vshard.error
---
...
--
-- Test string representations of errors.
--
ok, err = pcall(box.error, box.error.TIMEOUT)
---
...
box_error = lerror.box(err)
---
...
str = tostring(box_error)
---
...
util.portable_error(json.decode(str))
---
- type: ClientError
  message: Timeout exceeded
...
vshard_error = lerror.vshard(lerror.code.UNREACHABLE_MASTER, 'uuid', 'reason')
---
...
tostring(vshard_error)
---
- '{"reason":"reason","code":11,"type":"ShardingError","name":"UNREACHABLE_MASTER","uuid":"uuid","message":"Master
  of replicaset uuid is unreachable: reason"}'
...
log = require('log')
---
...
log.info('Log error: %s', vshard_error)
---
...
test_run:grep_log('default', '"reason":"reason","code":11,"type":"ShardingError"')
---
- '"reason":"reason","code":11,"type":"ShardingError"'
...
--
-- Part of gh-100: check `error.vshard`.
--
lerror.vshard(lerror.code.WRONG_BUCKET, 1, 'arg2', 'arg3')
---
- bucket_id: 1
  reason: arg2
  code: 1
  destination: arg3
  name: WRONG_BUCKET
  message: 'Cannot perform action with bucket 1, reason: arg2'
  type: ShardingError
...
-- Pass an arg of a wrong type.
util.check_error(lerror.vshard, lerror.code.WRONG_BUCKET, 'arg1', 'arg2', 100)
---
- 'bad argument #2 to ''format'' (number expected, got string)'
...
-- Pass less args than msg requires.
util.check_error(lerror.vshard, lerror.code.MISSING_MASTER)
---
- Wrong number of arguments are passed to MISSING_MASTER error
...
-- Pass more args than `args` field contains.
util.check_error(lerror.vshard, lerror.code.MISSING_MASTER, 'arg1', 'arg2')
---
- Wrong number of arguments are passed to MISSING_MASTER error
...
-- Pass wrong format code.
util.check_error(lerror.vshard, 'Wrong format code', 'arg1', 'arg2')
---
- Error message format is not found.
...
function raise_lua_err() assert(false) end
---
...
ok, err = pcall(raise_lua_err)
---
...
err = lerror.make(err)
---
...
util.portable_error(err)
---
- type: ClientError
  message: '[string "function raise_lua_err() assert(false) end "]:1: assertion failed!'
...
--
-- lerror.timeout() - portable alternative to box.error.new(box.error.TIMEOUT).
--
err = lerror.timeout()
---
...
type(err)
---
- table
...
assert(err.code == box.error.TIMEOUT)
---
- true
...
err.type
---
- ClientError
...
err.message
---
- Timeout exceeded
...
